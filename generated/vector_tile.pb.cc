// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_tile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vector_tile.pb.hpp"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mapnik {
namespace vector {

namespace {

const ::google::protobuf::Descriptor* tile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tile_reflection_ = NULL;
const ::google::protobuf::Descriptor* tile_value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tile_value_reflection_ = NULL;
const ::google::protobuf::Descriptor* tile_feature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tile_feature_reflection_ = NULL;
const ::google::protobuf::Descriptor* tile_layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tile_layer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* tile_GeomType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_vector_5ftile_2eproto() {
  protobuf_AddDesc_vector_5ftile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vector_tile.proto");
  GOOGLE_CHECK(file != NULL);
  tile_descriptor_ = file->message_type(0);
  static const int tile_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile, layers_),
  };
  tile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tile_descriptor_,
      tile::default_instance_,
      tile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tile));
  tile_value_descriptor_ = tile_descriptor_->nested_type(0);
  static const int tile_value_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_value, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_value, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_value, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_value, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_value, uint_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_value, sint_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_value, bool_value_),
  };
  tile_value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tile_value_descriptor_,
      tile_value::default_instance_,
      tile_value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_value, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_value, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tile_value));
  tile_feature_descriptor_ = tile_descriptor_->nested_type(1);
  static const int tile_feature_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_feature, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_feature, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_feature, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_feature, geometry_),
  };
  tile_feature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tile_feature_descriptor_,
      tile_feature::default_instance_,
      tile_feature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_feature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_feature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tile_feature));
  tile_layer_descriptor_ = tile_descriptor_->nested_type(2);
  static const int tile_layer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_layer, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_layer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_layer, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_layer, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_layer, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_layer, extent_),
  };
  tile_layer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tile_layer_descriptor_,
      tile_layer::default_instance_,
      tile_layer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_layer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_layer, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_layer, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tile_layer));
  tile_GeomType_descriptor_ = tile_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vector_5ftile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tile_descriptor_, &tile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tile_value_descriptor_, &tile_value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tile_feature_descriptor_, &tile_feature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tile_layer_descriptor_, &tile_layer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vector_5ftile_2eproto() {
  delete tile::default_instance_;
  delete tile_reflection_;
  delete tile_value::default_instance_;
  delete tile_value_reflection_;
  delete tile_feature::default_instance_;
  delete tile_feature_reflection_;
  delete tile_layer::default_instance_;
  delete tile_layer_reflection_;
}

void protobuf_AddDesc_vector_5ftile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021vector_tile.proto\022\rmapnik.vector\"\305\004\n\004t"
    "ile\022)\n\006layers\030\003 \003(\0132\031.mapnik.vector.tile"
    ".layer\032\241\001\n\005value\022\024\n\014string_value\030\001 \001(\t\022\023"
    "\n\013float_value\030\002 \001(\002\022\024\n\014double_value\030\003 \001("
    "\001\022\021\n\tint_value\030\004 \001(\003\022\022\n\nuint_value\030\005 \001(\004"
    "\022\022\n\nsint_value\030\006 \001(\022\022\022\n\nbool_value\030\007 \001(\010"
    "*\010\010\010\020\200\200\200\200\002\032r\n\007feature\022\n\n\002id\030\001 \001(\004\022\020\n\004tag"
    "s\030\002 \003(\rB\002\020\001\0223\n\004type\030\003 \001(\0162\034.mapnik.vecto"
    "r.tile.GeomType:\007Unknown\022\024\n\010geometry\030\004 \003"
    "(\rB\002\020\001\032\261\001\n\005layer\022\022\n\007version\030\017 \002(\r:\0011\022\014\n\004"
    "name\030\001 \002(\t\022-\n\010features\030\002 \003(\0132\033.mapnik.ve"
    "ctor.tile.feature\022\014\n\004keys\030\003 \003(\t\022)\n\006value"
    "s\030\004 \003(\0132\031.mapnik.vector.tile.value\022\024\n\006ex"
    "tent\030\005 \001(\r:\0044096*\010\010\020\020\200\200\200\200\002\"\?\n\010GeomType\022\013"
    "\n\007Unknown\020\000\022\t\n\005Point\020\001\022\016\n\nLineString\020\002\022\013"
    "\n\007Polygon\020\003*\005\010\020\020\200@B\002H\001", 622);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vector_tile.proto", &protobuf_RegisterTypes);
  tile::default_instance_ = new tile();
  tile_value::default_instance_ = new tile_value();
  tile_feature::default_instance_ = new tile_feature();
  tile_layer::default_instance_ = new tile_layer();
  tile::default_instance_->InitAsDefaultInstance();
  tile_value::default_instance_->InitAsDefaultInstance();
  tile_feature::default_instance_->InitAsDefaultInstance();
  tile_layer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vector_5ftile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vector_5ftile_2eproto {
  StaticDescriptorInitializer_vector_5ftile_2eproto() {
    protobuf_AddDesc_vector_5ftile_2eproto();
  }
} static_descriptor_initializer_vector_5ftile_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* tile_GeomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tile_GeomType_descriptor_;
}
bool tile_GeomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const tile_GeomType tile::Unknown;
const tile_GeomType tile::Point;
const tile_GeomType tile::LineString;
const tile_GeomType tile::Polygon;
const tile_GeomType tile::GeomType_MIN;
const tile_GeomType tile::GeomType_MAX;
const int tile::GeomType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int tile_value::kStringValueFieldNumber;
const int tile_value::kFloatValueFieldNumber;
const int tile_value::kDoubleValueFieldNumber;
const int tile_value::kIntValueFieldNumber;
const int tile_value::kUintValueFieldNumber;
const int tile_value::kSintValueFieldNumber;
const int tile_value::kBoolValueFieldNumber;
#endif  // !_MSC_VER

tile_value::tile_value()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapnik.vector.tile.value)
}

void tile_value::InitAsDefaultInstance() {
}

tile_value::tile_value(const tile_value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mapnik.vector.tile.value)
}

void tile_value::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  float_value_ = 0;
  double_value_ = 0;
  int_value_ = GOOGLE_LONGLONG(0);
  uint_value_ = GOOGLE_ULONGLONG(0);
  sint_value_ = GOOGLE_LONGLONG(0);
  bool_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tile_value::~tile_value() {
  // @@protoc_insertion_point(destructor:mapnik.vector.tile.value)
  SharedDtor();
}

void tile_value::SharedDtor() {
  if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void tile_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tile_value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tile_value_descriptor_;
}

const tile_value& tile_value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

tile_value* tile_value::default_instance_ = NULL;

tile_value* tile_value::New() const {
  return new tile_value;
}

void tile_value::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tile_value*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(double_value_, sint_value_);
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        string_value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tile_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapnik.vector.tile.value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string string_value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "string_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_float_value;
        break;
      }

      // optional float float_value = 2;
      case 2: {
        if (tag == 21) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_double_value;
        break;
      }

      // optional double double_value = 3;
      case 3: {
        if (tag == 25) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_int_value;
        break;
      }

      // optional int64 int_value = 4;
      case 4: {
        if (tag == 32) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uint_value;
        break;
      }

      // optional uint64 uint_value = 5;
      case 5: {
        if (tag == 40) {
         parse_uint_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint_value_)));
          set_has_uint_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sint_value;
        break;
      }

      // optional sint64 sint_value = 6;
      case 6: {
        if (tag == 48) {
         parse_sint_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint_value_)));
          set_has_sint_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bool_value;
        break;
      }

      // optional bool bool_value = 7;
      case 7: {
        if (tag == 56) {
         parse_bool_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((64u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapnik.vector.tile.value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapnik.vector.tile.value)
  return false;
#undef DO_
}

void tile_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapnik.vector.tile.value)
  // optional string string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string_value(), output);
  }

  // optional float float_value = 2;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_value(), output);
  }

  // optional double double_value = 3;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_value(), output);
  }

  // optional int64 int_value = 4;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int_value(), output);
  }

  // optional uint64 uint_value = 5;
  if (has_uint_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uint_value(), output);
  }

  // optional sint64 sint_value = 6;
  if (has_sint_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->sint_value(), output);
  }

  // optional bool bool_value = 7;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bool_value(), output);
  }

  // Extension range [8, 536870912)
  _extensions_.SerializeWithCachedSizes(
      8, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapnik.vector.tile.value)
}

::google::protobuf::uint8* tile_value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapnik.vector.tile.value)
  // optional string string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_value(), target);
  }

  // optional float float_value = 2;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->float_value(), target);
  }

  // optional double double_value = 3;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_value(), target);
  }

  // optional int64 int_value = 4;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->int_value(), target);
  }

  // optional uint64 uint_value = 5;
  if (has_uint_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->uint_value(), target);
  }

  // optional sint64 sint_value = 6;
  if (has_sint_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->sint_value(), target);
  }

  // optional bool bool_value = 7;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bool_value(), target);
  }

  // Extension range [8, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      8, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapnik.vector.tile.value)
  return target;
}

int tile_value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string string_value = 1;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional float float_value = 2;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

    // optional double double_value = 3;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

    // optional int64 int_value = 4;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
    }

    // optional uint64 uint_value = 5;
    if (has_uint_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint_value());
    }

    // optional sint64 sint_value = 6;
    if (has_sint_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint_value());
    }

    // optional bool bool_value = 7;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tile_value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tile_value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tile_value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tile_value::MergeFrom(const tile_value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_uint_value()) {
      set_uint_value(from.uint_value());
    }
    if (from.has_sint_value()) {
      set_sint_value(from.sint_value());
    }
    if (from.has_bool_value()) {
      set_bool_value(from.bool_value());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tile_value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tile_value::CopyFrom(const tile_value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tile_value::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void tile_value::Swap(tile_value* other) {
  if (other != this) {
    std::swap(string_value_, other->string_value_);
    std::swap(float_value_, other->float_value_);
    std::swap(double_value_, other->double_value_);
    std::swap(int_value_, other->int_value_);
    std::swap(uint_value_, other->uint_value_);
    std::swap(sint_value_, other->sint_value_);
    std::swap(bool_value_, other->bool_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata tile_value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tile_value_descriptor_;
  metadata.reflection = tile_value_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int tile_feature::kIdFieldNumber;
const int tile_feature::kTagsFieldNumber;
const int tile_feature::kTypeFieldNumber;
const int tile_feature::kGeometryFieldNumber;
#endif  // !_MSC_VER

tile_feature::tile_feature()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapnik.vector.tile.feature)
}

void tile_feature::InitAsDefaultInstance() {
}

tile_feature::tile_feature(const tile_feature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mapnik.vector.tile.feature)
}

void tile_feature::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tile_feature::~tile_feature() {
  // @@protoc_insertion_point(destructor:mapnik.vector.tile.feature)
  SharedDtor();
}

void tile_feature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tile_feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tile_feature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tile_feature_descriptor_;
}

const tile_feature& tile_feature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

tile_feature* tile_feature::default_instance_ = NULL;

tile_feature* tile_feature::New() const {
  return new tile_feature;
}

void tile_feature::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    id_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  tags_.Clear();
  geometry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tile_feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapnik.vector.tile.feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // repeated uint32 tags = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tags())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_tags())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mapnik::vector::tile_GeomType_IsValid(value)) {
            set_type(static_cast< ::mapnik::vector::tile_GeomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_geometry;
        break;
      }

      // repeated uint32 geometry = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_geometry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_geometry())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_geometry())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapnik.vector.tile.feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapnik.vector.tile.feature)
  return false;
#undef DO_
}

void tile_feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapnik.vector.tile.feature)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated uint32 tags = 2 [packed = true];
  if (this->tags_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tags_cached_byte_size_);
  }
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->tags(i), output);
  }

  // optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated uint32 geometry = 4 [packed = true];
  if (this->geometry_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_geometry_cached_byte_size_);
  }
  for (int i = 0; i < this->geometry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->geometry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapnik.vector.tile.feature)
}

::google::protobuf::uint8* tile_feature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapnik.vector.tile.feature)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated uint32 tags = 2 [packed = true];
  if (this->tags_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _tags_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->tags(i), target);
  }

  // optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated uint32 geometry = 4 [packed = true];
  if (this->geometry_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _geometry_cached_byte_size_, target);
  }
  for (int i = 0; i < this->geometry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->geometry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapnik.vector.tile.feature)
  return target;
}

int tile_feature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated uint32 tags = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->tags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tags(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tags_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 geometry = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->geometry_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->geometry(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _geometry_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tile_feature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tile_feature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tile_feature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tile_feature::MergeFrom(const tile_feature& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  geometry_.MergeFrom(from.geometry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tile_feature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tile_feature::CopyFrom(const tile_feature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tile_feature::IsInitialized() const {

  return true;
}

void tile_feature::Swap(tile_feature* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tags_.Swap(&other->tags_);
    std::swap(type_, other->type_);
    geometry_.Swap(&other->geometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tile_feature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tile_feature_descriptor_;
  metadata.reflection = tile_feature_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int tile_layer::kVersionFieldNumber;
const int tile_layer::kNameFieldNumber;
const int tile_layer::kFeaturesFieldNumber;
const int tile_layer::kKeysFieldNumber;
const int tile_layer::kValuesFieldNumber;
const int tile_layer::kExtentFieldNumber;
#endif  // !_MSC_VER

tile_layer::tile_layer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapnik.vector.tile.layer)
}

void tile_layer::InitAsDefaultInstance() {
}

tile_layer::tile_layer(const tile_layer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mapnik.vector.tile.layer)
}

void tile_layer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 1u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extent_ = 4096u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tile_layer::~tile_layer() {
  // @@protoc_insertion_point(destructor:mapnik.vector.tile.layer)
  SharedDtor();
}

void tile_layer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void tile_layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tile_layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tile_layer_descriptor_;
}

const tile_layer& tile_layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

tile_layer* tile_layer::default_instance_ = NULL;

tile_layer* tile_layer::New() const {
  return new tile_layer;
}

void tile_layer::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 35) {
    version_ = 1u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    extent_ = 4096u;
  }
  features_.Clear();
  keys_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tile_layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapnik.vector.tile.layer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_features;
        break;
      }

      // repeated .mapnik.vector.tile.feature features = 2;
      case 2: {
        if (tag == 18) {
         parse_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_features;
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated string keys = 3;
      case 3: {
        if (tag == 26) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keys(this->keys_size() - 1).data(),
            this->keys(this->keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keys");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectTag(34)) goto parse_values;
        break;
      }

      // repeated .mapnik.vector.tile.value values = 4;
      case 4: {
        if (tag == 34) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_values;
        if (input->ExpectTag(40)) goto parse_extent;
        break;
      }

      // optional uint32 extent = 5 [default = 4096];
      case 5: {
        if (tag == 40) {
         parse_extent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extent_)));
          set_has_extent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_version;
        break;
      }

      // required uint32 version = 15 [default = 1];
      case 15: {
        if (tag == 120) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((128u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapnik.vector.tile.layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapnik.vector.tile.layer)
  return false;
#undef DO_
}

void tile_layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapnik.vector.tile.layer)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .mapnik.vector.tile.feature features = 2;
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->features(i), output);
  }

  // repeated string keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keys(i).data(), this->keys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keys(i), output);
  }

  // repeated .mapnik.vector.tile.value values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->values(i), output);
  }

  // optional uint32 extent = 5 [default = 4096];
  if (has_extent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->extent(), output);
  }

  // required uint32 version = 15 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->version(), output);
  }

  // Extension range [16, 536870912)
  _extensions_.SerializeWithCachedSizes(
      16, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapnik.vector.tile.layer)
}

::google::protobuf::uint8* tile_layer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapnik.vector.tile.layer)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .mapnik.vector.tile.feature features = 2;
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->features(i), target);
  }

  // repeated string keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->keys(i), target);
  }

  // repeated .mapnik.vector.tile.value values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->values(i), target);
  }

  // optional uint32 extent = 5 [default = 4096];
  if (has_extent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->extent(), target);
  }

  // required uint32 version = 15 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->version(), target);
  }

  // Extension range [16, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      16, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapnik.vector.tile.layer)
  return target;
}

int tile_layer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 15 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 extent = 5 [default = 4096];
    if (has_extent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extent());
    }

  }
  // repeated .mapnik.vector.tile.feature features = 2;
  total_size += 1 * this->features_size();
  for (int i = 0; i < this->features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features(i));
  }

  // repeated string keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated .mapnik.vector.tile.value values = 4;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tile_layer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tile_layer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tile_layer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tile_layer::MergeFrom(const tile_layer& from) {
  GOOGLE_CHECK_NE(&from, this);
  features_.MergeFrom(from.features_);
  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_extent()) {
      set_extent(from.extent());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tile_layer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tile_layer::CopyFrom(const tile_layer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tile_layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->values())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void tile_layer::Swap(tile_layer* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(name_, other->name_);
    features_.Swap(&other->features_);
    keys_.Swap(&other->keys_);
    values_.Swap(&other->values_);
    std::swap(extent_, other->extent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata tile_layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tile_layer_descriptor_;
  metadata.reflection = tile_layer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int tile::kLayersFieldNumber;
#endif  // !_MSC_VER

tile::tile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapnik.vector.tile)
}

void tile::InitAsDefaultInstance() {
}

tile::tile(const tile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mapnik.vector.tile)
}

void tile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tile::~tile() {
  // @@protoc_insertion_point(destructor:mapnik.vector.tile)
  SharedDtor();
}

void tile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tile_descriptor_;
}

const tile& tile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

tile* tile::default_instance_ = NULL;

tile* tile::New() const {
  return new tile;
}

void tile::Clear() {
  _extensions_.Clear();
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapnik.vector.tile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mapnik.vector.tile.layer layers = 3;
      case 3: {
        if (tag == 26) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_layers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((128u <= tag && tag < 65536u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapnik.vector.tile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapnik.vector.tile)
  return false;
#undef DO_
}

void tile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapnik.vector.tile)
  // repeated .mapnik.vector.tile.layer layers = 3;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->layers(i), output);
  }

  // Extension range [16, 8192)
  _extensions_.SerializeWithCachedSizes(
      16, 8192, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapnik.vector.tile)
}

::google::protobuf::uint8* tile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapnik.vector.tile)
  // repeated .mapnik.vector.tile.layer layers = 3;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->layers(i), target);
  }

  // Extension range [16, 8192)
  target = _extensions_.SerializeWithCachedSizesToArray(
      16, 8192, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapnik.vector.tile)
  return target;
}

int tile::ByteSize() const {
  int total_size = 0;

  // repeated .mapnik.vector.tile.layer layers = 3;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tile::MergeFrom(const tile& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tile::CopyFrom(const tile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tile::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->layers())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void tile::Swap(tile* other) {
  if (other != this) {
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata tile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tile_descriptor_;
  metadata.reflection = tile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vector
}  // namespace mapnik

// @@protoc_insertion_point(global_scope)
